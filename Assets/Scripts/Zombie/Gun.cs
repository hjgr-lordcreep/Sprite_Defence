using System.Collections;
using UnityEngine;

// 총을 구현한다
[ExecuteInEditMode]
public class Gun : MonoBehaviour
{
    // 총의 상태를 표현하는데 사용할 타입을 선언한다
    public enum State
    {
        Ready, // 발사 준비됨
        //Empty, // 탄창이 빔
        //Reloading // 재장전 중
    }

    public State state { get; private set; } // 현재 총의 상태

    public Transform fireTransform; // 총알이 발사될 위치

    [SerializeField]
    private ParticleSystem muzzleFlashEffect; // 총구 화염 효과
    //public ParticleSystem shellEjectEffect; // 탄피 배출 효과

    private LineRenderer bulletLineRenderer; // 총알 궤적을 그리기 위한 렌더러

    private AudioSource gunAudioPlayer; // 총 소리 재생기

    public GunData gunData; // 총의 현재 데이터

    public Light muzzleLight = null;

    [SerializeField]
    private float fireDistance = 50f; // 사정거리

    public int ammoRemain = 100; // 남은 전체 탄약
    public int magAmmo; // 현재 탄창에 남아있는 탄약

    private float lastFireTime; // 총을 마지막으로 발사한 시점

    private float knockBack = 0.07f;

    private void Awake()
    {
        // 사용할 컴포넌트들의 참조를 가져오기
        gunAudioPlayer = GetComponent<AudioSource>();
        bulletLineRenderer = GetComponent<LineRenderer>();

        // 사용할 점을 두개로 변경
        bulletLineRenderer.positionCount = 2;
        // 라인 렌더러를 비활성화
        bulletLineRenderer.enabled = false;
    }

    private void OnEnable()
    {
        // 전체 예비 탄약 양을 초기화
        ammoRemain = gunData.startAmmoRemain;
        // 현재 탄창을 가득채우기
        magAmmo = gunData.magCapacity;

        // 총의 현재 상태를 총을 쏠 준비가 된 상태로 변경
        state = State.Ready;
        // 마지막으로 총을 쏜 시점을 초기화
        lastFireTime = 0;
    }

    private void Update()
    {
        Debug.DrawRay(fireTransform.position, fireTransform.forward * fireDistance, Color.red);
    }

    // 발사 시도
    public void Fire()
    {
        // 현재 상태가 발사 가능한 상태
        // && 마지막 총 발사 시점에서 timeBetFire 이상의 시간이 지남
        if (state == State.Ready && Time.time >= lastFireTime + gunData.timeBetFire)
        {
            // 마지막 총 발사 시점을 갱신
            lastFireTime = Time.time;
            // 실제 발사 처리 실행
            Shot();
        }
    }

    // 실제 발사 처리
    private void Shot()
    {
        // 레이캐스트에 의한 충돌 정보를 저장하는 컨테이너
        RaycastHit hit;
        // 총알이 맞은 곳을 저장할 변수
        Vector3 hitPosition = Vector3.zero;

        // 레이캐스트(시작지점, 방향, 충돌 정보 컨테이너, 사정거리)
        if (Physics.Raycast(fireTransform.position,
            fireTransform.forward, out hit, fireDistance, 
            1 << LayerMask.NameToLayer("Zombie")|
            1<<LayerMask.NameToLayer("Fortress")))
        {
            // 레이가 어떤 물체와 충돌한 경우

            // 충돌한 상대방으로부터 IDamageable 오브젝트를 가져오기 시도
            IDamageable target =
                hit.collider.GetComponent<IDamageable>();

            Debug.Log(hit.collider.name);

            // 상대방으로 부터 IDamageable 오브젝트를 가져오는데 성공했다면
            if (target != null && !hit.collider.CompareTag("Fortress"))
            {
                // 좀비 타격음 재생
                gunAudioPlayer.PlayOneShot(gunData.zombieHitClip);
                // 상대방의 OnDamage 함수를 실행시켜서 상대방에게 데미지 주기
                target.OnDamage(gunData.damage, hit.point, hit.normal);
                // 레이가 충돌한 위치 저장
                Vector3 dir = hit.transform.position - transform.position;
                //Vector3 knockBackPos = other.transform.position * (-dir.normalized * knockBack);
                Vector3 knockBackPos = hit.transform.position + (dir.normalized * knockBack);
                knockBackPos.y = 0;
                hit.transform.position = knockBackPos;
            }
            else
            {
                Debug.Log("No hit detected");
            }

            
            hitPosition = hit.point;
        }
        else
        {
            // 레이가 다른 물체와 충돌하지 않았다면
            // 총알이 최대 사정거리까지 날아갔을때의 위치를 충돌 위치로 사용
            hitPosition = fireTransform.position +
                          fireTransform.forward * fireDistance;
        }

        // 발사 이펙트 재생 시작
        StartCoroutine(ShotEffect(hitPosition));

        //// 남은 탄환의 수를 -1
        //magAmmo--;
        //if (magAmmo <= 0)
        //{
        //    // 탄창에 남은 탄약이 없다면, 총의 현재 상태를 Empty으로 갱신
        //    state = State.Empty;
        //}
    }

    // 발사 이펙트와 소리를 재생하고 총알 궤적을 그린다
    private IEnumerator ShotEffect(Vector3 hitPosition)
    {
        //// 총구 화염 효과 재생
        muzzleFlashEffect.Play();
        muzzleLight.enabled = true;
        //// 탄피 배출 효과 재생
        //shellEjectEffect.Play();

        //// 총격 소리 재생
        gunAudioPlayer.PlayOneShot(gunData.shotClip);

        // 선의 시작점은 총구의 위치
        bulletLineRenderer.SetPosition(0, fireTransform.position);
        // 선의 끝점은 입력으로 들어온 충돌 위치
        bulletLineRenderer.SetPosition(1, hitPosition);
        // 라인 렌더러를 활성화하여 총알 궤적을 그린다
        bulletLineRenderer.enabled = true;

        // 총알 궤적 설정
        float duration = 0.1f;
        float fadeSpeed = 1.0f / duration;
        float alpha = 1.0f;

        while (alpha > 0.0f)
        {
            alpha -= fadeSpeed * Time.deltaTime;
            Color startColor = new Color(1, 1, 1, alpha);
            bulletLineRenderer.startColor = startColor;
            bulletLineRenderer.endColor = startColor;
            yield return null;
        }

        bulletLineRenderer.enabled = false;
        muzzleLight.enabled = false;

        //// 0.03초 동안 잠시 처리를 대기
        //yield return new WaitForSeconds(0.03f);
        //
        //// 라인 렌더러를 비활성화하여 총알 궤적을 지운다
        //bulletLineRenderer.enabled = false;
        //StopAllCoroutines();
        //muzzleLight.enabled = false;
    }

    //// 재장전 시도
    //public bool Reload()
    //{
    //    if (state == State.Reloading ||
    //        ammoRemain <= 0 || magAmmo >= gunData.magCapacity)
    //    {
    //        // 이미 재장전 중이거나, 남은 총알이 없거나
    //        // 탄창에 총알이 이미 가득한 경우 재장전 할수 없다
    //        return false;
    //    }

    //    // 재장전 처리 시작
    //    StartCoroutine(ReloadRoutine());
    //    return true;
    //}

    //// 실제 재장전 처리를 진행
    //private IEnumerator ReloadRoutine()
    //{
    //    // 현재 상태를 재장전 중 상태로 전환
    //    state = State.Reloading;
    //    // 재장전 소리 재생
    //    gunAudioPlayer.PlayOneShot(gunData.reloadClip);

    //    // 재장전 소요 시간 만큼 처리를 쉬기
    //    yield return new WaitForSeconds(gunData.reloadTime);

    //    // 탄창에 채울 탄약을 계산한다
    //    int ammoToFill = gunData.magCapacity - magAmmo;

    //    // 탄창에 채워야할 탄약이 남은 탄약보다 많다면,
    //    // 채워야할 탄약 수를 남은 탄약 수에 맞춰 줄인다
    //    if (ammoRemain < ammoToFill)
    //    {
    //        ammoToFill = ammoRemain;
    //    }

    //    // 탄창을 채운다
    //    magAmmo += ammoToFill;
    //    // 남은 탄약에서, 탄창에 채운만큼 탄약을 뺸다
    //    ammoRemain -= ammoToFill;

    //    // 총의 현재 상태를 발사 준비된 상태로 변경
    //    state = State.Ready;
    //}
}